@model List<Attendance>
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@{
    var userId = Context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    var userRole =User.Claims.FirstOrDefault(z=>z.Type==ClaimTypes.Role)!.Value;
    ViewData["Title"] = $"{ViewBag.Name} Attendance";
}

<h3 class="text-center m-5 PageTitle">@($"{ViewBag.Name} Attendance") </h3>
@if (userRole != "Employee")
{
<button class="btn btn-success text-dark" id="processAttendanceBtn"><i class="bi bi-file-spreadsheet"></i> Export Attendance</button>
}
@if (ViewBag.userId==userId){
    @if (Model.Where(z => z.Date.Date == DateTime.Now.Date).Count() == 0)
    {
    <form asp-controller="Attendances" asp-action="Index" method="post" class="w-75 m-auto">
        @Html.AntiForgeryToken()
        <div class="form-group">
            <input type="hidden" name="UserId" value="@userId" />
        </div>

        <button type="submit" class="btn btn-primary mt-1">Exist</button>
    </form>

    }
    else if (Model.Where(z => z.Date.Date == DateTime.Now.Date && z.CheckOut == TimeSpan.Zero).Count() > 0)
    {
        if(DateTime.Now.Hour>14)
        {
        <form asp-controller="Attendances" asp-action="Index" method="post" class="w-75 m-auto">
            @Html.AntiForgeryToken()
            <div class="form-group">
                <input type="hidden" name="UserId" value="@userId" />
            </div>

            <button type="submit" class="btn btn-primary mt-1">Leave</button>
        </form>
        }
    }
}
<table id="attendanceTable" class="text-center table table-bordered table-hover table-responsive">
    <thead class=" bg-black text-white">
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Check in</th>
            <th scope="col">Check out</th>
            <th scope="col">Late</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model)
        {
            
            <tr>
                <td>@task.Date.Day.ToString("D2") - @task.Date.Month.ToString("D2") - @task.Date.Year </td>
                <td>@task.CheckIn.Hours.ToString("D2") : @task.CheckIn.Minutes.ToString("D2")</td>
                <td>
                 @(
                    (task.CheckOut.Hours > 12 
                        ? (task.CheckOut.Hours - 12).ToString("D2")
                               : (task.CheckOut.Hours == 0 ? "00" : task.CheckOut.Hours.ToString("D2"))
                    ) + ":" + task.CheckOut.Minutes.ToString("D2")
                    )
                </td>
                <td>
                    @{
                        var user = await UserManager.FindByIdAsync(task.ApplicationUserId);
                        var egyptTime = new TimeSpan();
                        TimeSpan late = new TimeSpan();

                        if (user.Email.ToLower() == "ahmeddesign@gmail.com")
                        {
                            egyptTime = new TimeSpan(13, 0, 0);
                            if (task.CheckIn > new TimeSpan(13, 0, 0))
                                late = task.CheckIn - egyptTime;
                        }
                        else
                        {
                            egyptTime = new TimeSpan(9, 0, 0);
                            if (task.CheckIn > new TimeSpan(9, 0, 0))
                                late = task.CheckIn - egyptTime;
                        }
                    }
                    @late.Hours.ToString("D2"): @late.Minutes.ToString("D2") : @late.Seconds.ToString("D2")
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
 <script>
        $(document).ready(function () {
            $("#processAttendanceBtn").click(function () {
                // Prepare the table data for export
                const attendanceList = [];
                $("#attendanceTable tbody tr").each(function () {
                    const row = {
                        التاريخ: $(this).find("td:nth-child(1)").text(),
                        حضور: $(this).find("td:nth-child(2)").text(),
                        إنصراف: $(this).find("td:nth-child(3)").text(),
                        تأخير: $(this).find("td:nth-child(4)").text(),
                    };
                    attendanceList.push(row);
                });

                const workbook = XLSX.utils.book_new();
                const worksheet = XLSX.utils.json_to_sheet(attendanceList, { origin: "A2" }); 
                let title = $('.PageTitle').text().trim();
        
                // Remove invalid characters for file names (e.g., slashes, colons, etc.)
                title = title.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_');
                // worksheet["A1:Z1"].width
                // Add a title row spanning 4 columns
                worksheet["A1"] = { v: `${title} Attendance`, t: "s" }; 
                worksheet["!merges"] = [{ s: { r: 0, c: 0 }, e: { r: 0, c: 3 } }]; // Merge A1:D1

                // Append the worksheet to the workbook
                XLSX.utils.book_append_sheet(workbook, worksheet, "Attendance");
                 worksheet['!cols'] = Array(5).fill({ wch: 20 });
                // Define the filename using the title
                let filename = `${title}.xlsx`;
                // Generate the Excel file and trigger download
                XLSX.writeFile(workbook, filename);
            });
        });
    </script>
}