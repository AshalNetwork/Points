@model List<Attendance>
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@{
    var userId = Context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    var userRole =User.Claims.FirstOrDefault(z=>z.Type==ClaimTypes.Role)!.Value;

    ViewData["Title"] = "Attendance";
}
<h1 class="text-center">User Attendance</h1>
@if(userRole!="Employee")
{
<button class="btn btn-success text-dark" id="processAttendanceBtn"><i class="bi bi-file-spreadsheet"></i> Export Attendance</button>
}
@if (Model.Where(z => z.Date.Date == DateTime.Now.Date).Count() == 0)
{
    <form asp-controller="Attendances" asp-action="Index" method="post" class="w-75 m-auto">
        @Html.AntiForgeryToken()
        <div class="form-group">
            <input type="hidden" name="UserId" value="@userId" />
        </div>

        <button type="submit" class="btn btn-primary mt-1">Exist</button>
    </form>

}
else if (Model.Where(z => z.Date.Date == DateTime.Now.Date && z.CheckOut == TimeSpan.Zero).Count() > 0)
{
    <form asp-controller="Attendances" asp-action="Index" method="post" class="w-75 m-auto">
        @Html.AntiForgeryToken()
        <div class="form-group">
            <input type="hidden" name="UserId" value="@userId" />
        </div>

        <button type="submit" class="btn btn-primary mt-1">Leave</button>
    </form>
}
<table id="attendanceTable" class="text-center table table-bordered table-hover table-responsive">
    <thead class=" bg-black text-white">
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Check in</th>
            <th scope="col">Check out</th>
            <th scope="col">Late</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model)
        {
            <tr>
                <td>@task.Date.Day - @task.Date.Month - @task.Date.Year </td>
                <td>@task.CheckIn.Hours : @task.CheckIn.Minutes</td>
                <td>@task.CheckOut.Hours : @task.CheckOut.Minutes</td>
                <td>
                    @{
                        var egyptTime = new TimeSpan(9, 0, 0);
                        var lat = @task.CheckIn - @egyptTime;
                    }
                    @lat.Hours : @lat.Minutes : @lat.Seconds
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
 <script>
        $(document).ready(function () {
            $("#processAttendanceBtn").click(function () {
                // Prepare the table data for export
                const attendanceList = [];
                $("#attendanceTable tbody tr").each(function () {
                    const row = {
                        Date: $(this).find("td:nth-child(1)").text(),
                        CheckIn: $(this).find("td:nth-child(2)").text(),
                        Checkout: $(this).find("td:nth-child(3)").text(),
                        Late: $(this).find("td:nth-child(4)").text(),
                    };
                    attendanceList.push(row);
                });

                const workbook = XLSX.utils.book_new();
                const worksheet = XLSX.utils.json_to_sheet(attendanceList.reverse(), { origin: "A2" }); 

                // Add a title row spanning 4 columns
                worksheet["A1"] = { v: "Attendance Report", t: "s" }; 
                worksheet["!merges"] = [{ s: { r: 0, c: 0 }, e: { r: 0, c: 3 } }]; // Merge A1:D1

                // Append the worksheet to the workbook
                XLSX.utils.book_append_sheet(workbook, worksheet, "Attendance");

                // Generate the Excel file and trigger download
                XLSX.writeFile(workbook, "Attendance.xlsx");
            });
        });
    </script>
}